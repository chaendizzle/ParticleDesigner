<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_popupMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// not an actual menu element, since it's a popup
active = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// image index to shapes
shapes = ds_list_create();
shapes[| 0] = pt_shape_pixel;
shapes[| 1] = pt_shape_circle;
shapes[| 2] = pt_shape_square;
shapes[| 3] = pt_shape_line;
shapes[| 4] = pt_shape_star;
shapes[| 5] = pt_shape_circle;
shapes[| 6] = pt_shape_ring;
shapes[| 7] = pt_shape_sphere;
shapes[| 8] = pt_shape_flare;
shapes[| 9] = pt_shape_spark;
shapes[| 10] = pt_shape_explosion;
shapes[| 11] = pt_shape_cloud;
shapes[| 12] = pt_shape_smoke;
shapes[| 13] = pt_shape_snow;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw parameters

W = 500;
H = 350;
X = 0.5 * (getDisplayRoomWidth() - W);
Y = 0.5 * (getDisplayRoomHeight() - H);
B = 6;
// number of elements per row
gridW = 8;
// max capacity
capacity = 50;

// 3 sprites used by system, not to be used as particles
excludedSprites = 3;

// scroll bar size
scrollBarWidth = 20;
scrollBarB = 2;
scrollBarSep = 5;
// position of the top of the screen
scrollBarPos = 0;

// bottom bar
bottomH = 48;

// draw surface
surfX = X + B;
surfY = Y + B;
surfW = W - (2 * B) - scrollBarSep - scrollBarWidth;
surfH = H - (2 * B) - bottomH;
cellW = surfW / gridW;
cellH = cellW;
surf = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate draw info
var sprites = 0;
for (var i = excludedSprites; i &lt; capacity - ds_list_size(shapes); i++)
{
    if (sprite_exists(i))
    {
        sprites++;
    }
}
total = sprites + ds_list_size(shapes);
// max height of grid
gridH = ceil(total / gridW);

// clamp scroll bar pos
scrollBarPos = clamp(scrollBarPos, 0, max(0, (gridH * cellH) - surfH));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// only draw if active
if (active)
{
    // draw background
    drawOutlineRectExt(X, Y, W, H, B * 0.5, c_gray, c_black, 1, 1);
    
    // draw grid to surface
    if (!surface_exists(surf))
    {
        surf = surface_create(surfW, surfH);
    }
    var surfB = 2;
    surface_set_target(surf);
    for (var i = 0; i &lt; total; i++)
    {
        var s = modulo(i, gridW);
        var t = floor(i / gridW);
        // if it's a shape, draw the shape
        if (i &lt; ds_list_size(shapes))
        {
            drawOutlineRectExt(s * cellW, t * cellH - scrollBarPos, cellW - (2 * surfB), cellH - (2 * surfB),
            surfB, c_dkgray, c_black, 1, 1);
            draw_sprite_stretched(spr_shapes, i, (s * cellW), (t * cellH) - scrollBarPos,
            cellW - (2 * surfB), cellH - (2 * surfB));
        }
        // otherwise, draw the sprite
        else
        {
            drawOutlineRectExt(s * cellW, t * cellH - scrollBarPos, cellW - (2 * surfB), cellH - (2 * surfB),
            surfB, c_dkgray, c_black, 1, 1);
            draw_sprite_stretched(i - ds_list_size(shapes) + excludedSprites, 0, (s * cellW), (t * cellH) - scrollBarPos,
            cellW - (2 * surfB), cellH - (2 * surfB));
        }
    }
    surface_reset_target();
    // draw the surface
    draw_surface(surf, surfX, surfY);
    
    // mouse hover indicator
    for (var i = 0; i &lt; total; i++)
    {
        var s = modulo(i, gridW);
        var t = floor(i / gridW);
        if (obj_focus.focus == id &amp;&amp; mouse_in_rect(surfX + (s * cellW), surfY + (t * cellH), cellW, cellH))
        {
            draw_set_color(c_white);
            draw_set_alpha(0.5);
            draw_rectangle(surfX + (s * cellW), surfY + (t * cellH),
            surfX + (s * cellW) + cellW - (2 * surfB), surfY + (t * cellH) + cellH - (2 * surfB), false);
        }
    }
    
    // draw scroll bar if necessary
    if (gridH * cellH &gt; surfH)
    {
        var scrollBarH = surfH * (surfH / (gridH * cellH));
        var scrollBarP = surfH * (scrollBarPos / ((gridH * cellH) - surfH));
        draw_set_alpha(1);
        draw_set_color(c_dkgray);
        draw_roundrect(X + W - scrollBarWidth + scrollBarB, Y + scrollBarP,
        X + W - scrollBarB, Y + scrollBarP + scrollBarH, false);
        draw_set_color(c_black);
        draw_roundrect(X + W - scrollBarWidth + scrollBarB, Y + scrollBarP,
        X + W - scrollBarB, Y + scrollBarP + scrollBarH, true);
    }
    
    // draw bottom bar
    drawOutlineRectExt(X, Y + H - bottomH, W, bottomH, B * 0.5, c_gray, c_black, 1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw buttons
if (active)
{
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
