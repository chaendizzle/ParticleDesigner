<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// two handled slider init
event_inherited();
// slider values
valueMin = 0;
valueMax = 1;
valueA = 0;
valueB = 1;
twoHandled = true;

selected = noone;
handleWR = 2;

leftCol = c_black;
rightCol = c_black;
spr = noone;

rnd = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate draw numbers
centerY = Y + (0.5 * H);
handleHR = 0.5 * H;
handleIR = 0.25 * 0.5 * H;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle mouse drag handle
if (!twoHandled)
{
    valueB = valueMax;
}
switch (selected)
{
    case SLIDER_A:
        valueA = clamp(map_range(cursor_get_x(), X, X + W, valueMin, valueMax), 0, valueB);
        break;
    case SLIDER_B:
        valueB = clamp(map_range(cursor_get_x(), X, X + W, valueMin, valueMax), valueA, valueMax);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// unselect
selected = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle clicks on handles
var AX = X + map_range(valueA, valueMin, valueMax, 0, W);
var BX = X + map_range(valueB, valueMin, valueMax, 0, W);
var toPx = W / (valueMax - valueMin);

// check click
if (mouse_in_rect(AX - handleWR - 2, centerY - handleHR, 4 + handleWR * 2, handleHR * 2))
{
    selected = SLIDER_A;
    if (twoHandled &amp;&amp; abs(valueA - valueB) * toPx &lt; 2 &amp;&amp; abs(valueB - valueMin) * toPx &lt; 2)
    {
        selected = SLIDER_B;
    }
}
else if (twoHandled &amp;&amp; mouse_in_rect(BX - handleWR - 2, centerY - handleHR, 4 + handleWR * 2, handleHR * 2))
{
    selected = SLIDER_B;
    if (abs(valueA - valueB) * toPx &lt; 2 &amp;&amp; abs(valueA - valueMax) * toPx &lt; 2)
    {
        selected = SLIDER_A;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw

var AX = X + map_range(valueA, valueMin, valueMax, 0, W);
var BX = X + map_range(valueB, valueMin, valueMax, 0, W);

// inner bar is 0.25 of height
draw_set_alpha(1);
draw_rectangle_colour(X, centerY - handleIR, X + W, centerY + handleIR, leftCol, rightCol, rightCol, leftCol, false);
if (sprite_exists(spr))
{
    draw_sprite_stretched(spr, 0, X, centerY - handleIR, W, handleIR * 2);
}

// handles
draw_set_alpha(1);
draw_set_color(c_black);
draw_rectangle(AX - handleWR, centerY - handleHR, AX + handleWR, centerY + handleHR, false);
if (twoHandled)
{
    draw_rectangle(BX - handleWR, centerY - handleHR, BX + handleWR, centerY + handleHR, false);
}
draw_set_color(c_blue);
if (selected == SLIDER_A)
{
    draw_rectangle(AX - handleWR, centerY - handleHR, AX + handleWR, centerY + handleHR, false);
}
if (twoHandled &amp;&amp; selected == SLIDER_B)
{
    draw_rectangle(BX - handleWR, centerY - handleHR, BX + handleWR, centerY + handleHR, false);
}
draw_set_color(c_white);
draw_rectangle(AX - handleWR, centerY - handleHR, AX + handleWR, centerY + handleHR, true);
if (twoHandled)
{
    draw_rectangle(BX - handleWR, centerY - handleHR, BX + handleWR, centerY + handleHR, true);
}
    
// text indicates current values
draw_set_alpha(1);
draw_set_color(c_black);
draw_set_font(fnt_kindasmall);
// draw texts
var textBorder = 2;
var valueAStr = string(round(valueA * rnd) / rnd);
var valueBStr = string(round(valueB * rnd) / rnd);
var posA = AX;
var widthA = string_width(valueAStr) + (2 * textBorder);
posA = clamp(posA, X + (widthA * 0.0), X + W - (widthA * 0.0));
var posB = BX;
var widthB = string_width(valueBStr) + (2 * textBorder);
posB = clamp(posB, X + (widthB * 0.0), X + W - (widthB * 0.0));
// look at overlap
var overlap = max(0, (posA + (0.5 * widthA)) - (posB - (0.5 * widthB)));
// if there is overlap
if (twoHandled &amp;&amp; overlap &gt; 0)
{
    // shift them out equally
    posA -= overlap * 0.5;
    posB += overlap * 0.5;
}
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(c_gray);
//draw_rectangle(posA - (0.5 * widthA), Y + H + textBorder, posA + (0.5 * widthA), Y + H + textBorder + 24, false);
draw_set_color(c_black);
//draw_rectangle(posA - (0.5 * widthA), Y + H + textBorder, posA + (0.5 * widthA), Y + H + textBorder + 24, true);
draw_text(posA, Y + H + textBorder + 6, valueAStr);
if (twoHandled)
{
    draw_set_color(c_gray);
    //draw_rectangle(posB - (0.5 * widthB), Y + H + textBorder, posB + (0.5 * widthB), Y + H + textBorder + 24, false);
    draw_set_color(c_black);
    //draw_rectangle(posB - (0.5 * widthB), Y + H + textBorder, posB + (0.5 * widthB), Y + H + textBorder + 24, true);
    draw_text(posB, Y + H + textBorder + 6, valueBStr);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
