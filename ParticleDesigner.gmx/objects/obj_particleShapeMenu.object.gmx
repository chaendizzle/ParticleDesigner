<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add submenus
event_inherited();

W = getTypeMenuW();
border = 4;

submenus = ds_list_create();

// top bar
addSubmenu(submenus, id, createTextRect(0, 0, W, 30, "Shape/Sprite", fnt_subtitle, c_black, c_ltgray, c_black, 1, 1, 0));

// sprite/shape selection menu
imagebox = createSpriteRect(6, 32, 60, 60, noone, 0, c_black, 1);
addSubmenu(submenus, id, imagebox);

textbox = createTextRect(67, 50, 85, 24, "noone", fnt_small, c_black, c_white, c_black, 1, 0, 0);
textbox.halign = fa_left;
addSubmenu(submenus, id, textbox);

menuOutput = createMenuButton(X + W - 12 - 85, 50, 85, 24, "Change...", fnt_tab, c_black, c_gray, c_black, 1, 1, 1, instance_create(0, 0, obj_shapeMenu));
menuOutput.shapeType = noone;
menuOutput.shapeIndex = noone;
addSubmenu(submenus, id, menuOutput);

// animate checkbox
addSubmenu(submenus, id, createTextRect(5, 96, 60, 18, "Animate", fnt_kindasmall, c_black, c_gray, c_black, 1, 1, 1));
anim = createCheckbox(5 + 60, 96, 18, 18, c_red, c_dkgray, c_black, 1, 1, 1);
addSubmenu(submenus, id, anim);

// stretch checkbox
addSubmenu(submenus, id, createTextRect(5 + 83, 96, 60, 18, "Stretch", fnt_kindasmall, c_black, c_gray, c_black, 1, 1, 1));
stretch = createCheckbox(5 + 60 + 83, 96, 18, 18, c_red, c_dkgray, c_black, 1, 1, 1);
addSubmenu(submenus, id, stretch);

// random checkbox
addSubmenu(submenus, id, createTextRect(X + W - 3 - 60 - 18 - 4, 96, 60, 18, "Random", fnt_kindasmall, c_black, c_gray, c_black, 1, 1, 1));
rand = createCheckbox(X + W - 3 - 18 - 4, 96, 18, 18, c_red, c_dkgray, c_black, 1, 1, 1);
addSubmenu(submenus, id, rand);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shape index to string
shapes = ds_list_create();
shapes[| 0] = "Pixel";
shapes[| 1] = "Circle";
shapes[| 2] = "Square";
shapes[| 3] = "Line";
shapes[| 4] = "Star";
shapes[| 5] = "Circle";
shapes[| 6] = "Ring";
shapes[| 7] = "Sphere";
shapes[| 8] = "Flare";
shapes[| 9] = "Spark";
shapes[| 10] = "Explosion";
shapes[| 11] = "Cloud";
shapes[| 12] = "Smoke";
shapes[| 13] = "Snow";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// continuously scan for obj_shapeMenu feedback
// if there's data
if (menuOutput.shapeType != noone)
{
    // output it
    if (menuOutput.shapeType == SHAPE_SHAPE)
    {
        textbox.text = stringDotTruncate(shapes[| menuOutput.shapeIndex], 12);
        imagebox.spr = spr_shapes;
        imagebox.img = menuOutput.shapeIndex;
    }
    else
    {
        textbox.text = stringDotTruncate(sprite_get_name(menuOutput.shapeIndex), 12);
        imagebox.spr = menuOutput.shapeIndex;
        imagebox.img = 0;
    }
    menuOutput.shapeType = noone;
    menuOutput.shapeIndex = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this menu and children
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    with (inst)
    {
        event_user(UPDATE_SIZES);
    }
}

// find max height of any element
var maxH = 0;
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    if (inst.RelY + inst.H &gt; maxH)
    {
        maxH = inst.RelY + inst.H;
    }
}

// surround that element with a border
H = maxH + (2 * border);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the background
draw_set_color(c_ltgray);
draw_set_alpha(1);
draw_rectangle(X, Y, X + W, Y + H, false);
// draw the bottom separator
draw_set_color(c_dkgray);
draw_rectangle(X, Y + H - border, X + W, Y + H, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
