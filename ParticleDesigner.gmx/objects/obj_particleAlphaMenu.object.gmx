<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add submenus
event_inherited();

W = getTypeMenuW();
border = 4;

// top bar
textrect = createTextRect(0, 0, W, 30, "Alpha", fnt_subtitle, c_black, c_ltgray, c_black, 1, 1, 0);

// "Type:" textbox
textrect2 = createTextRect(4, 32, 0, 24, "Type:", fnt_subtitle, c_black, c_ltgray, c_black, 1, 1, 0);
textrect2.halign = fa_left;

// color type
colorOptions = ds_list_create();
colorOptions[| ALPHA_1] = "1-alpha";
colorOptions[| ALPHA_2] = "2-alpha fade";
colorOptions[| ALPHA_3] = "3-alpha fade";
dropdown = createDropdown(56, 32, 120, 24, colorOptions, fnt_kindasmall, c_black, c_gray, c_black, 1, 1, 1);

// options menus
optionMenus = ds_list_create();
optionMenus[| ALPHA_1] = ds_list_create();
optionMenus[| ALPHA_2] = ds_list_create();
optionMenus[| ALPHA_3] = ds_list_create();
// all of the menus have the dropdown
for (var i = 0; i &lt; ds_list_size(optionMenus); i++)
{
    addSubmenu(optionMenus[| i], id, textrect);
    addSubmenu(optionMenus[| i], id, textrect2);
    addSubmenu(optionMenus[| i], id, dropdown);
}

selected = ALPHA_1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 1-alpha, optionMenus[| ALPHA_1]
(addSubmenu(optionMenus[| ALPHA_1], id, createTextRect(4, 64, 0, 32, "Alpha: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
oneAlpha = addSubmenu(optionMenus[| ALPHA_1], id, createSlider(80, 64, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
oneAlpha.valueA = 1;

// blend brightness
(addSubmenu(optionMenus[| ALPHA_1], id, createTextRect(4, 108, 0, 20, "Blend Brightness: ", fnt_kindabig, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
blendBrightness1 = addSubmenu(optionMenus[| ALPHA_1], id, createCheckbox(150, 108, 20, 20, c_red, c_dkgray, c_black, 1, 1, 1));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 2-alpha, optionMenus[| ALPHA_2]
(addSubmenu(optionMenus[| ALPHA_2], id, createTextRect(4, 64, 0, 32, "Start: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
twoAlphaA = addSubmenu(optionMenus[| ALPHA_2], id, createSlider(80, 64, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
twoAlphaA.valueA = 1;

(addSubmenu(optionMenus[| ALPHA_2], id, createTextRect(4, 112, 0, 32, "End: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
twoAlphaB = addSubmenu(optionMenus[| ALPHA_2], id, createSlider(80, 112, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
twoAlphaB.valueA = 0;

// blend brightness
(addSubmenu(optionMenus[| ALPHA_2], id, createTextRect(4, 156, 0, 20, "Blend Brightness: ", fnt_kindabig, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
blendBrightness2 = addSubmenu(optionMenus[| ALPHA_2], id, createCheckbox(150, 156, 20, 20, c_red, c_dkgray, c_black, 1, 1, 1));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 3-alpha, optionMenus[| ALPHA_3]
(addSubmenu(optionMenus[| ALPHA_3], id, createTextRect(4, 64, 0, 32, "Start: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeAlphaA = addSubmenu(optionMenus[| ALPHA_3], id, createSlider(80, 64, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
threeAlphaA.valueA = 0;

(addSubmenu(optionMenus[| ALPHA_3], id, createTextRect(4, 112, 0, 32, "Middle: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeAlphaB = addSubmenu(optionMenus[| ALPHA_3], id, createSlider(80, 112, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
threeAlphaB.valueA = 1;

(addSubmenu(optionMenus[| ALPHA_3], id, createTextRect(4, 160, 0, 32, "End: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeAlphaC = addSubmenu(optionMenus[| ALPHA_3], id, createSlider(80, 160, 150, 24, 0, 1, false, c_ltgray, c_black, noone, 100));
threeAlphaC.valueA = 0;

// blend brightness
(addSubmenu(optionMenus[| ALPHA_3], id, createTextRect(4, 204, 0, 20, "Blend Brightness: ", fnt_kindabig, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
blendBrightness3 = addSubmenu(optionMenus[| ALPHA_3], id, createCheckbox(150, 204, 20, 20, c_red, c_dkgray, c_black, 1, 1, 1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select option
selectColorOption(dropdown.selected);
updateAbsolutePositions(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add to map:
// alpha
//     type
//     alpha1
//     alpha2
//     alpha3
// blend

var alpha = ds_map_create();
ds_map_add_map(info, "alpha", alpha);
alpha[? "type"] = selected;
switch(selected)
{
    case ALPHA_1:
        alpha[? "alpha1"] = oneAlpha.valueA;
        info[? "blend"] = blendBrightness1.checked;
        break;
    case ALPHA_2:
        alpha[? "alpha1"] = twoAlphaA.valueA;
        alpha[? "alpha2"] = twoAlphaB.valueA;
        info[? "blend"] = blendBrightness2.checked;
        break;
    case ALPHA_3:
        alpha[? "alpha1"] = threeAlphaA.valueA;
        alpha[? "alpha2"] = threeAlphaB.valueA;
        alpha[? "alpha3"] = threeAlphaC.valueA;
        info[? "blend"] = blendBrightness3.checked;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this menu and children
if (!ds_exists(submenus, ds_type_list))
{
    exit;
}

for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    with (inst)
    {
        event_user(UPDATE_SIZES);
    }
}

// find max height of any element
var maxH = 0;
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    if (inst.RelY + inst.H &gt; maxH)
    {
        maxH = inst.RelY + inst.H;
    }
}

// surround that element with a border
H = maxH + (2 * border);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the background
draw_set_color(c_ltgray);
draw_set_alpha(1);
draw_rectangle(X, Y, X + W, Y + H, false);
// draw the bottom separator
draw_set_color(c_dkgray);
draw_rectangle(X, Y + H - border, X + W, Y + H, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
