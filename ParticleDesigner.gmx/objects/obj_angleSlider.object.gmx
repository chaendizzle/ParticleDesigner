<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// one or two-handled angle slider
event_inherited();

// control handles
angleA = 0;
angleB = 0;
selected = false;
change = 2;
sgn = 1;

// position and radius
centerX = 0;
centerY = 0;
R = 0;
RelX = centerX - R;
RelY = centerY - R;
X = RelX;
Y = RelY;
W = 2 * R;
H = 2 * R;
twoHandled = true;
outsideCol = c_black;
handleCol = c_white;
fillCol = c_dkgray;
pieCol = c_white;
outsideAlpha = 1;
handleAlpha = 1;
fillAlpha = 1;
pieAlpha = 0.5;

handleR = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move selection with mouse
if (selected)
{
    var prevA = angleA;
    angleB = modulo(angleB, 360);
    angleA = point_direction(centerX, centerY, cursor_get_x(), cursor_get_y());
    if (sgn)
    {
        angleA = map_range_closed(angleA - angleB - angleB, 0, 360, angleB, angleB + 360);
    }
    else
    {
        angleA = map_range_closed(angleA - angleB - angleB, 0, 360, angleB - 360, angleB);
    }
    if (!change &amp;&amp; abs(prevA - angleA) &gt; 180)
    {
        change = true;
        sgn = -sgn;
        if (sgn)
        {
            angleA = map_range_closed(angleA - angleB - angleB, 0, 360, angleB, angleB + 360);
        }
        else
        {
            angleA = map_range_closed(angleA - angleB - angleB, 0, 360, angleB - 360, angleB);
        }
    }
    else if (change)
    {
        change = false;
    }
}
// set center
centerX = X + R;
centerY = Y + R;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// unselect the handle
selected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if within radius
var posAX = centerX + lengthdir_x(R, angleA);
var posAY = centerY + lengthdir_y(R, angleA);
var posBX = centerX + lengthdir_x(R, angleB);
var posBY = centerY + lengthdir_y(R, angleB);
// check mouse on a handle
if (checkFocus())
{
    if (mouse_in_circle(posAX, posAY, handleR))
    {
        selected = true;
    }
    else if (mouse_in_circle(posBX, posBY, handleR))
    {
        // swap then continue as normal
        var a = angleA;
        angleA = angleB;
        angleB = a;
        sgn = -sgn;
        change = true;
        selected = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the angle slider
// draw fill
draw_set_color(fillCol);
draw_set_alpha(fillAlpha);
draw_circle(centerX, centerY, R, false);
// draw pie
draw_set_color(pieCol);
draw_set_alpha(pieAlpha);
draw_pie(centerX + 1, centerY + 1, R, angleA, angleB, 100);
// draw outline
draw_set_color(outlineCol);
draw_set_alpha(outlineAlpha);
draw_circle(centerX, centerY, R, true);
// draw handles
var posAX = centerX + lengthdir_x(R, angleA);
var posAY = centerY + lengthdir_y(R, angleA);
var posBX = centerX + lengthdir_x(R, angleB);
var posBY = centerY + lengthdir_y(R, angleB);
draw_set_color(handleCol);
draw_set_alpha(handleAlpha);
draw_circle(posAX, posAY, handleR, false);
draw_circle(posBX, posBY, handleR, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
