<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init - this is the root submenu for particles
event_inherited();

// also has New, Save, Load, and Export buttons at the top

// each set of submenus is a single tab. Inefficient, but oh well.
tabs = ds_list_create();
// the currently selected tab
selected = noone;

// since this is root, it starts out as active
active = true;

// size
H = 56;
W = 270;
totalH = H;
// right side of the screen
RelX = getDisplayRoomWidth() - W;
originalX = RelX;
RelY = 0;
originalY = RelY;

surf = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create one tab

// generates names like Particle1, Particle2
nameIndex = 0;

// create the first tab
ds_list_add(tabs, createTab(nextTabName()));
selectTab(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// buttons draw info
buttonX = 0;
buttonY = 0;
buttonW = 32;
buttonH = 32;
buttonBarW = W;
buttonBarH = 32;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tab draw info

// single tab draw parameters
tabMinW = 32;
tabMaxW = 96;
tabH = 24;
tabTextBorder = 2;

// tab bar draw parameters
tabBarX = 0;
tabBarY = buttonBarH;
tabBarW = W;
tabBarH = 24;
tabLeftSpace = 3;
tabTopSpace = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scroll bar

// scroll bar size
scrollBarWidth = 14;
scrollBarB = 2;
scrollBarSep = 5;
// position of the top of the screen, also -RelY
scrollBarPos = 0;
scrollBarSelected = false;
scrollBarSelectY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this is the root submenu, and layout is vertical
// all submenus get their positions automatically set

// all submenus update size
event_user(UPDATE_SIZES);

// using size, determine RelY of submenus
var currentY = H;
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    inst.RelY = currentY;
    currentY += inst.H;
}
totalH = currentY;

// update all positions
updateAbsolutePositions(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scroll
var scrollBarH = getDisplayRoomHeight() * (getDisplayRoomHeight() / totalH);
if (mouse_wheel_up())
{
    scrollBarPos -= map_range(30, 0, getDisplayRoomHeight() - scrollBarH, 0, totalH - getDisplayRoomHeight());
}
if (mouse_wheel_down())
{
    scrollBarPos += map_range(30, 0, getDisplayRoomHeight() - scrollBarH, 0, totalH - getDisplayRoomHeight());
}
if (scrollBarSelected &amp;&amp; active &amp;&amp; checkFocus(noone))
{
    scrollBarPos = map_range(cursor_get_y() - scrollBarSelectY, 0, getDisplayRoomHeight() - scrollBarH, 0, totalH - getDisplayRoomHeight());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stop scrolling
scrollBarSelected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scroll bar click
// draw scroll bar
var scrollBarH = getDisplayRoomHeight() * (getDisplayRoomHeight() / totalH);
var scrollBarP = getDisplayRoomHeight() * (scrollBarPos / totalH);
if (checkFocus(noone) &amp;&amp; mouse_in_rect(originalX + W - scrollBarWidth + scrollBarB, originalY + scrollBarP, scrollBarWidth, scrollBarH))
{
    scrollBarSelected = true;
    scrollBarSelectY = cursor_get_y() - (originalY + scrollBarP);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this menu and children
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    with (inst)
    {
        event_user(UPDATE_SIZES);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the scroll bar on the right if necessary
if (totalH &gt; getDisplayRoomHeight())
{
    // clamp scroll bar pos
    scrollBarPos = clamp(scrollBarPos, 0, max(0, totalH - getDisplayRoomHeight()));
    RelY = -scrollBarPos;
    // draw scroll bar
    var scrollBarH = getDisplayRoomHeight() * (getDisplayRoomHeight() / totalH);
    var scrollBarP = getDisplayRoomHeight() * (scrollBarPos / totalH);
    draw_set_alpha(0.6);
    draw_set_color(c_white);
    draw_roundrect(originalX + W - scrollBarWidth + scrollBarB, originalY + scrollBarP,
    originalX + W - scrollBarB, originalY + scrollBarP + scrollBarH, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the background
draw_set_alpha(1);
draw_set_color(c_dkgray);
draw_rectangle(X - 4, Y, X + W, Y + totalH, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw button bar
var nowX = X + buttonX;
var nowY = Y + buttonY;

// draw the bar
draw_set_color(c_dkgray);
draw_set_alpha(1);
draw_rectangle(nowX, nowY, nowX + buttonBarW, nowY + buttonBarH, false);
// draw the 4 buttons
for (var i = 0; i &lt; 4; i++)
{
    // highlight if mouse is there
    if (checkFocus(popup) &amp;&amp; mouse_in_rect(nowX + (i * buttonW), nowY, buttonW, buttonH))
    {
        draw_set_color(c_white);
        draw_set_alpha(0.4);
        draw_rectangle(nowX + (i * buttonW), nowY, nowX + (i * buttonW) + buttonW, nowY + buttonH, false);
        draw_set_alpha(1);
    }
    draw_sprite_stretched(spr_file, i, nowX + (i * buttonW), nowY, buttonW, buttonH);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the tabs
nowX = X + tabBarX;
nowY = Y + tabBarY;

// draw the bar
draw_set_color(c_dkgray);
draw_set_alpha(1);
draw_rectangle(nowX, nowY, nowX + buttonBarW, nowY + tabBarH, false);

// draw to the tab surfaces
for (var i = 0; i &lt; ds_list_size(tabs); i++)
{
    var tab = tabs[| i];
    // get tab dimensions
    var tabW = string_width(tab[| TAB_NAME]) + (2 * tabTextBorder);
    tabW = clamp(tabW, tabMinW, tabMaxW);
    // make sure surface exists... and draw if it doesn't
    if (!surface_exists(tab[| TAB_SURF]))
    {
        tab[| TAB_SURF] = surface_create(tabW, tabH);
        // draw to surface
        surface_set_target(tab[| TAB_SURF]);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(c_black);
        draw_set_alpha(1);
        draw_set_font(fnt_tab);
        draw_text(tabTextBorder, tabTextBorder, tab[| TAB_NAME]);
        surface_reset_target();
    }
}

// draw tabs to the screen
var counterX = nowX + tabLeftSpace;
var nowTabY = nowY + tabTopSpace;
for (var i = 0; i &lt; ds_list_size(tabs); i++)
{
    var tab = tabs[| i];
    var w = surface_get_width(tab[| TAB_SURF]);
    // draw tab back
    draw_set_color(c_ltgray);
    draw_set_alpha(1);
    draw_rectangle(counterX, nowTabY, counterX + w, nowTabY + tabH, false);
    // highlight if mouse is there
    if (checkFocus(popup) &amp;&amp; mouse_in_rect(counterX, nowY, w, tabH))
    {
        draw_set_color(c_white);
        draw_set_alpha(0.4);
        draw_rectangle(counterX, nowY, counterX + w, nowY + tabH, false);
        draw_set_alpha(1);
    }
    draw_set_color(c_ltgray);
    draw_set_alpha(1);
    draw_rectangle(counterX, nowTabY, counterX + w, nowTabY + tabH, true);
    // draw tab surface (w/ text)
    draw_set_alpha(1);
    draw_surface(tab[| TAB_SURF], counterX, nowTabY);
    counterX += w;
}

// draw the new tab button
var w = tabH;
// highlight if mouse is there
if (checkFocus(popup) &amp;&amp; mouse_in_rect(counterX, nowY, w, tabH))
{
    draw_set_color(c_white);
    draw_set_alpha(0.4);
    draw_rectangle(counterX, nowY, counterX + w, nowY + tabH, false);
    draw_set_alpha(1);
}
// draw tab surface (w/ text)
draw_set_alpha(1);
draw_sprite_stretched(spr_newtab, 0, counterX, nowY, w, tabH);
counterX += w;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the really slow color thing
exit;
var rX = 10;
var rY = 10;
var rW = 400;
var rH = 100;

if (!surface_exists(surf))
{
    surf = surface_create(rW, rH);
    surface_set_target(surf);
    draw_set_alpha(1);
    for (var i = 0; i &lt; rW; i++)
    {
        for (var j = 0; j &lt; rH; j++)
        {
            var h = clamp(map_range(i, 0, rW, 0, 255), 0, 255);
            //var s = clamp(map_range(i, rW * 0.5, rW, 255, 0), 0, 255);
            //var v = clamp(map_range(i, 0, rW * 0.5, 0, 255), 0, 255);
            draw_set_color(make_colour_hsv(h, 255, 255));
            draw_point(i, j);
        }
    }
    surface_reset_target();
    surface_save(surf, "lel.png");
}
draw_surface(surf, rX, rY)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clipboard_set_text(json_encode(createTypeInfoMap()));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
