<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_popupMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// right click popup menu, all handled by this, due to its different look

// dimensions
W = 206;
H = 52;
leftSep = 30;
font = fnt_kindasmall;

showEmitters = true;

// tentative, since position is really set by RMB click
X = 0;
Y = 0;

// whether or not this is open
active = false;

backgroundMenu = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set position to mouse and activate
if (mouse_in_rect(0, 0, obj_particleTypeMenu.X - 4, getDisplayRoomHeight()))
{
    if (checkFocus(noone))
    {
        X = cursor_get_x();
        Y = cursor_get_y();
        active = true;
        setFocus(id);
    }
    else if (checkFocus(id))
    {
        X = cursor_get_x();
        Y = cursor_get_y();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// keep track of left click, to see if on something
if (!active)
{
    exit;
}
var cellW = W;
var cellH = H / 2;
var cellX = X;
var cellY = Y;

// mouse click on "Show Emitters"
if (mouse_in_rect(cellX, cellY, cellW, cellH - 1))
{
    active = false;
    setFocus(noone);
    showEmitters = !showEmitters;
    exit;
}

cellY += cellH;
// mouse click on "Change Background"
if (mouse_in_rect(cellX, cellY, cellW, cellH - 1))
{
    active = false;
    setFocus(noone);
    if (instance_exists(backgroundMenu))
    {
        backgroundMenu.active = true;
        setFocus(backgroundMenu);
    }
    exit;
}

setFocus(noone);
active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the right click menu
if (!active)
{
    exit;
}

// clamp draw position
X = clamp(X, 2, getDisplayRoomWidth() - W - 2);
Y = clamp(Y, 2, getDisplayRoomHeight() - H - 2);

// draw the rectangle backs for each option
var cellW = W;
var cellH = H / 2;
var cellX = X;
var cellY = Y;
for (cellY = Y; cellY &lt; Y + H; cellY += cellH)
{
    drawOutlineRectExt(cellX, cellY, cellW, cellH, 1, c_gray, c_black, 1, 1);
    // highlight on mouse over
    if (mouse_in_rect(cellX, cellY, cellW, cellH - 1))
    {
        drawOutlineRectExt(cellX, cellY, cellW, cellH, 1, c_white, c_black, 0.5, 0);
    }
}
// draw the text
cellY = Y;
var textPosX = X + leftSep;
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_color(c_black);
draw_set_alpha(1);
draw_text(textPosX, cellY + (0.5 * cellH), "Emitters Visible");
cellY += cellH;
draw_text(textPosX, cellY + (0.5 * cellH), "Change Background");

// draw the checkmark for showEmitters
if (showEmitters)
{
    cellY = Y;
    drawCheckmark(X + (0.5 * leftSep), cellY + (0.7 * cellH), 24 * 0.4, 24 * 0.7, 5, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
