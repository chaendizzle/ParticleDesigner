<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// menu item that is a rectangle with text in it
event_inherited();

text = "";
textFont = fnt_title;
textCol = c_black;
fillCol = c_white;
outlineCol = c_black;
textAlpha = 1;
fillAlpha = 1;
outlineAlpha = 1;
highlightCol = c_white;
highlightAlpha = 0.5;

surf = noone;
surfHighlight = noone;
selectStart = noone;
selectEnd = noone;
scrollPos = 0;
scrollSpd = 10;
selected = false;
selection = false;
blink = false;
blinkDur = 20;
alarm[0] = blinkDur;

value = 0;

finished = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cursor blink
blink = !blink;
alarm[0] = blinkDur;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle input
if (selected &amp;&amp; !keyboard_check(vk_control) &amp;&amp;
!keyboard_check(vk_control2) &amp;&amp; !keyboard_check(vk_alt) &amp;&amp;
!keyboard_check(vk_shift))
{
    // only normal numbers allowed
    // numeric characters
    for (var i = ord('0'); i &lt;= ord('9'); i++)
    {
        if (keyboard_check_pressed(i))
        {
            // if something is selected...
            if (selectStart != selectEnd)
            {
                // replace it
                var start = min(selectStart, selectEnd);
                var nd = max(selectStart, selectEnd);
                var a = string_copy(text, 1, start);
                var b = string_copy(text, nd + 1, string_length(text) - nd);
                text = a + b;
                selectEnd = start;
                selectStart = start;
            }
            // insert character
            text = string_insert(chr(i), text, selectStart + 1);
            selectStart++;
            selectEnd++;
        }
    }
    // . character
    if (keyboard_check_pressed(vk_decimal) || keyboard_check_pressed(vk_period) || keyboard_check_pressed(ord('.')))
    {
        // if something is selected...
        if (selectStart != selectEnd)
        {
            // replace it
            var start = min(selectStart, selectEnd);
            var nd = max(selectStart, selectEnd);
            var a = string_copy(text, 1, start);
            var b = string_copy(text, nd + 1, string_length(text) - nd);
            text = a + b;
            selectEnd = start;
            selectStart = start;
        }
        // insert character
        text = string_insert('.', text, selectStart + 1);
        selectStart++;
        selectEnd++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle special input
if (keyboard_check_direct(vk_control) || keyboard_check_direct(vk_control2))
{
    // select all
    if (keyboard_check_pressed(ord('a')) || keyboard_check_pressed(ord('A')))
    {
        selectStart = 0;
        selectEnd = string_length(text);
        selection = false;
    }
    // cut
    if (keyboard_check_pressed(ord('x')) || keyboard_check_pressed(ord('X')))
    {
        var start = min(selectStart, selectEnd);
        var nd = max(selectStart, selectEnd);
        // to clipboard
        clipboard_set_text(string_copy(text, start + 1, nd - start));
        // replace it
        var a = string_copy(text, 1, start);
        var b = string_copy(text, nd + 1, string_length(text) - nd);
        text = a + b;
        selectEnd = start;
        selectStart = start;
    }
    // copy
    if (keyboard_check_pressed(ord('c')) || keyboard_check_pressed(ord('C')))
    {
        // to clipboard
        var start = min(selectStart, selectEnd);
        var nd = max(selectStart, selectEnd);
        clipboard_set_text(string_copy(text, start + 1, nd - start));
    }
    // paste
    if (keyboard_check_pressed(ord('v')) || keyboard_check_pressed(ord('V')))
    {
        // insert it
        var start = min(selectStart, selectEnd);
        var nd = max(selectStart, selectEnd);
        var a = string_copy(text, 1, start);
        var b = string_copy(text, nd + 1, string_length(text) - nd);
        text = a + clipboard_get_text() + b;
        selectEnd = nd;
        selectStart = nd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle selection
if (selected &amp;&amp; selection)
{
    var mousePos = cursor_get_x() - X + scrollPos;
    var pos = findStringPos(text, mousePos);
    selectEnd = pos;
}
if (!selected)
{
    selection = false;
    selectStart = noone;
    selectEnd = noone;
    // remove any extra dots
    var t = "";
    var dot = false;
    for (var i = 1; i &lt;= string_length(text); i++)
    {
        var c = ord(string_char_at(text, i));
        // if it's a number or a .
        if (inrange(c, ord('0'), ord('9') + 1))
        {
            t += chr(c);
        }
        if (c == ord('.') &amp;&amp; !dot)
        {
            t += chr(c);
            dot = true;
        }
    }
    text = t;
    // get value
    value = real(text);
    text = string(value);
}

if (selected)
{
    if (selectStart != noone)
    {
        selectStart = clamp(selectStart, 0, string_length(text));
        selectEnd = clamp(selectEnd, 0, string_length(text));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// release selection
selection = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// click on textbox
if (checkFocus(popup) &amp;&amp; mouse_in_rect(X, Y, W, H))
{
    // if unselected previously
    if (!selected)
    {
        // select all
        selectStart = 0;
        selectEnd = string_length(text);
        selection = false;
    }
    else
    {
        // select a single point
        var mousePos = cursor_get_x() - X + scrollPos;
        var pos = findStringPos(text, mousePos);
        selectStart = pos;
        selectEnd = pos;
        selection = true;
    }
    selected = true;
}
else
{
    finished = true;
    selected = false;
    selectStart = noone;
    selectEnd = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// filter out any non-numbers
var t = "";
for (var i = 1; i &lt;= string_length(text); i++)
{
    var c = ord(string_char_at(text, i));
    // if it's a number or a .
    if (inrange(c, ord('0'), ord('9') + 1) || c == ord('.'))
    {
        t += chr(c);
    }
}
text = t;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the textrect
// draw the rect
draw_set_color(fillCol);
draw_set_alpha(fillAlpha);
draw_rectangle(X, Y, X + W, Y + H, false);
draw_set_color(outlineCol);
draw_set_alpha(outlineAlpha);
draw_rectangle(X, Y, X + W, Y + H, true);
// draw the text to surface
if (!surface_exists(surf))
{
    surf = surface_create(W, H);
}
if (!surface_exists(surfHighlight))
{
    surfHighlight = surface_create(W, H);
}
// clear highlight surface
surface_set_target(surfHighlight);
draw_clear_alpha(c_white, 0);
surface_reset_target();
// draw to text surface
surface_set_target(surf);
draw_clear_alpha(c_white, 0);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(textFont);
draw_set_color(textCol);
draw_set_alpha(textAlpha);
draw_text(-scrollPos + 2, 0.5 * H, text);
surface_reset_target();
// draw highlighting
surface_set_target(surfHighlight);
if (selected &amp;&amp; selectStart != noone &amp;&amp; selectEnd != noone)
{
    var posA = -scrollPos + string_width(string_copy(text, 1, selectStart));
    var posB = -scrollPos + string_width(string_copy(text, 1, selectEnd));
    var lineH = string_height("|") + 4;
    // if both are selecting the same point
    if (selectStart == selectEnd)
    {
        // draw the blinky cursor
        if (blink)
        {
            draw_line(posA + 2, (0.5 * H) - (0.5 * lineH), posA, (0.5 * H) + (0.5 * lineH));
        }
    }
    else
    {
        // draw highlighting
        draw_set_color(highlightCol);
        draw_set_alpha(highlightAlpha);
        draw_rectangle(posA + 2, (0.5 * H) - (0.5 * lineH), posB + 2, (0.5 * H) + (0.5 * lineH), false);
    }
}
surface_reset_target();
// draw surfaces
draw_set_alpha(1);
draw_surface(surf, X, Y);
draw_surface(surfHighlight, X, Y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle right
if (!selected)
{
    exit;
}

if (selectStart != selectEnd)
{
    selectStart = max(selectStart, selectEnd);
    selectEnd = selectStart;
}
else if (selectStart &lt; string_length(text))
{
    selectStart++;
    selectEnd++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle left
if (!selected)
{
    exit;
}

if (selectStart != selectEnd)
{
    selectStart = min(selectStart, selectEnd);
    selectEnd = selectStart;
}
else if (selectStart &gt; 0)
{
    selectStart--;
    selectEnd--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// confirm
selected = false;
finished = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle backspace
if (!selected)
{
    exit;
}

// if something is selected...
if (selectStart != selectEnd)
{
    // replace it
    var start = min(selectStart, selectEnd);
    var nd = max(selectStart, selectEnd);
    var a = string_copy(text, 1, start);
    var b = string_copy(text, nd + 1, string_length(text) - nd);
    text = a + b;
    selectEnd = start;
    selectStart = start;
}
// otherwise, backspace at the selected region
else if (selectStart &gt; 0)
{
    var a = string_copy(text, 1, selectStart - 1);
    var b = string_copy(text, selectStart + 1, string_length(text) - selectStart);
    text = a + b;
    selectStart--;
    selectEnd--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
