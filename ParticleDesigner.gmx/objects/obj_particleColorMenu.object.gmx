<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_menuElement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add submenus
event_inherited();

W = getTypeMenuW();
border = 4;

// top bar
textrect = createTextRect(0, 0, W, 30, "Color", fnt_subtitle, c_black, c_ltgray, c_black, 1, 1, 0);

// "Type:" textbox
textrect2 = createTextRect(4, 32, 0, 24, "Type:", fnt_subtitle, c_black, c_ltgray, c_black, 1, 1, 0);
textrect2.halign = fa_left;

// color type
colorOptions = ds_list_create();
colorOptions[| COLOR_1] = "1-color";
colorOptions[| COLOR_2] = "2-color fade";
colorOptions[| COLOR_3] = "3-color fade";
colorOptions[| COLOR_MIX] = "2-color mix";
colorOptions[| COLOR_RGB] = "RGB mix";
colorOptions[| COLOR_HSV] = "HSV mix";
dropdown = createDropdown(56, 32, 120, 24, colorOptions, fnt_kindasmall, c_black, c_gray, c_black, 1, 1, 1);

// options menus
optionMenus = ds_list_create();
optionMenus[| COLOR_1] = ds_list_create();
optionMenus[| COLOR_2] = ds_list_create();
optionMenus[| COLOR_3] = ds_list_create();
optionMenus[| COLOR_MIX] = ds_list_create();
optionMenus[| COLOR_RGB] = ds_list_create();
optionMenus[| COLOR_HSV] = ds_list_create();
// all of the menus have the dropdown
for (var i = 0; i &lt; ds_list_size(optionMenus); i++)
{
    addSubmenu(optionMenus[| i], id, textrect);
    addSubmenu(optionMenus[| i], id, textrect2);
    addSubmenu(optionMenus[| i], id, dropdown);
}

selected = COLOR_1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 1-color, optionMenus[| COLOR_1]
(addSubmenu(optionMenus[| COLOR_1], id, createTextRect(2, 64, 0, 24, "Color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
oneColor = addSubmenu(optionMenus[| COLOR_1], id, createColorButton(64, 64, 24, 24));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 2-color fade, optionMenus[| COLOR_2]
(addSubmenu(optionMenus[| COLOR_2], id, createTextRect(2, 64, 0, 24, "Start color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
twoColorA = addSubmenu(optionMenus[| COLOR_2], id, createColorButton(100, 64, 24, 24));

(addSubmenu(optionMenus[| COLOR_2], id, createTextRect(2, 96, 0, 24, "End color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
twoColorB = addSubmenu(optionMenus[| COLOR_2], id, createColorButton(100, 96, 24, 24));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 3-color fade, optionMenus[| COLOR_3]
(addSubmenu(optionMenus[| COLOR_3], id, createTextRect(2, 64, 0, 24, "Start color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeColorA = addSubmenu(optionMenus[| COLOR_3], id, createColorButton(120, 64, 24, 24));

(addSubmenu(optionMenus[| COLOR_3], id, createTextRect(2, 96, 0, 24, "Middle color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeColorB = addSubmenu(optionMenus[| COLOR_3], id, createColorButton(120, 96, 24, 24));

(addSubmenu(optionMenus[| COLOR_3], id, createTextRect(2, 128, 0, 24, "End color: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
threeColorC = addSubmenu(optionMenus[| COLOR_3], id, createColorButton(120, 128, 24, 24));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 2-color mix, optionMenus[| COLOR_MIX]
(addSubmenu(optionMenus[| COLOR_MIX], id, createTextRect(2, 64, 0, 24, "Color 1: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
mixColorA = addSubmenu(optionMenus[| COLOR_MIX], id, createColorButton(76, 64, 24, 24));

(addSubmenu(optionMenus[| COLOR_MIX], id, createTextRect(2, 96, 0, 24, "Color 2: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
mixColorB = addSubmenu(optionMenus[| COLOR_MIX], id, createColorButton(76, 96, 24, 24));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RGB mix, optionMenus[| COLOR_RGB]
(addSubmenu(optionMenus[| COLOR_RGB], id, createTextRect(4, 64, 0, 32, "R: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorRGBR = addSubmenu(optionMenus[| COLOR_RGB], id, createSlider(32, 64, 195, 24, 0, 255, true, c_black, c_red, noone, 1));

(addSubmenu(optionMenus[| COLOR_RGB], id, createTextRect(4, 112, 0, 32, "G: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorRGBG = addSubmenu(optionMenus[| COLOR_RGB], id, createSlider(32, 112, 195, 24, 0, 255, true, c_black, c_green, noone, 1));

(addSubmenu(optionMenus[| COLOR_RGB], id, createTextRect(4, 160, 0, 32, "B: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorRGBB = addSubmenu(optionMenus[| COLOR_RGB], id, createSlider(32, 160, 195, 24, 0, 255, true, c_black, c_blue, noone, 1));

// pad space
(addSubmenu(optionMenus[| COLOR_RGB], id, createTextRect(0, 200, 0, 0, "", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HSV mix, optionMenus[| COLOR_HSV]
(addSubmenu(optionMenus[| COLOR_HSV], id, createTextRect(4, 64, 0, 32, "H: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorHSVH = addSubmenu(optionMenus[| COLOR_HSV], id, createSlider(32, 64, 195, 24, 0, 255, true, c_ltgray, c_ltgray, spr_hue, 1));

(addSubmenu(optionMenus[| COLOR_HSV], id, createTextRect(4, 112, 0, 32, "S: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorHSVS = addSubmenu(optionMenus[| COLOR_HSV], id, createSlider(32, 112, 195, 24, 0, 255, true, c_black, c_black, noone, 1));

(addSubmenu(optionMenus[| COLOR_HSV], id, createTextRect(4, 160, 0, 32, "V: ", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
colorHSVV = addSubmenu(optionMenus[| COLOR_HSV], id, createSlider(32, 160, 195, 24, 0, 255, true, c_black, c_white, noone, 1));

// pad space
(addSubmenu(optionMenus[| COLOR_HSV], id, createTextRect(0, 200, 0, 0, "", fnt_subtitle, c_black, c_white, c_white, 1, 0, 0))).halign = fa_left;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select option
selectColorOption(dropdown.selected);
updateAbsolutePositions(id);

// update HSV colors
if (selected == COLOR_HSV)
{
    var hsvMenu = optionMenus[| COLOR_HSV];
    // hue slider
    var hueSlider = hsvMenu[| 4];
    // sat slider
    var satSlider = hsvMenu[| 6];
    // val slider
    var valSlider = hsvMenu[| 8];
    // set colors
    var hueCol = mean(hueSlider.valueA, hueSlider.valueB);
    satSlider.leftCol = make_colour_hsv(hueCol, 0, 255);
    satSlider.rightCol = make_colour_hsv(hueCol, 255, 255);
    valSlider.leftCol = make_colour_hsv(hueCol, 255, 0);
    valSlider.rightCol = make_colour_hsv(hueCol, 255, 255);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add to map:
// color
//     type
//     color1/rmin-&gt;rmax/hmin-&gt;hmax
//     color2/gmin-&gt;gmax/smin-&gt;smax
//     color3/bmin-&gt;gmax/vmin-&gt;vmax

var color = ds_map_create();
ds_map_add_map(info, "color", color);
color[? "type"] = selected;
switch(selected)
{
    case COLOR_1:
        color[? "color1"] = oneColor.color;
        break;
    case COLOR_2:
        color[? "color1"] = twoColorA.color;
        color[? "color2"] = twoColorB.color;
        break;
    case COLOR_3:
        color[? "color1"] = threeColorA.color;
        color[? "color2"] = threeColorB.color;
        color[? "color3"] = threeColorC.color;
        break;
    case COLOR_MIX:
        color[? "color1"] = mixColorA.color;
        color[? "color2"] = mixColorB.color;
        break;
    case COLOR_RGB:
        color[? "rmin"] = colorRGBR.valueA;
        color[? "rmax"] = colorRGBR.valueB;
        color[? "gmin"] = colorRGBG.valueA;
        color[? "gmax"] = colorRGBG.valueB;
        color[? "bmin"] = colorRGBB.valueA;
        color[? "bmax"] = colorRGBB.valueB;
        break;
    case COLOR_HSV:
        color[? "hmin"] = colorHSVH.valueA;
        color[? "hmax"] = colorHSVH.valueB;
        color[? "smin"] = colorHSVS.valueA;
        color[? "smax"] = colorHSVS.valueB;
        color[? "vmin"] = colorHSVV.valueA;
        color[? "vmax"] = colorHSVV.valueB;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this menu and children
if (!ds_exists(submenus, ds_type_list))
{
    exit;
}

for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    with (inst)
    {
        event_user(UPDATE_SIZES);
    }
}

// find max height of any element
var maxH = 0;
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    if (inst.RelY + inst.H &gt; maxH)
    {
        maxH = inst.RelY + inst.H;
    }
}

// surround that element with a border
H = maxH + (2 * border);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// needs to be active to act
if(!active)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the background
draw_set_color(c_ltgray);
draw_set_alpha(1);
draw_rectangle(X, Y, X + W, Y + H, false);
// draw the bottom separator
draw_set_color(c_dkgray);
draw_rectangle(X, Y + H - border, X + W, Y + H, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
