<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_popupMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// not an actual menu element, since it's a popup
active = false;
target = noone;
selected = c_white;

selecting = noone;

// despite not being a menuElement, knows how to do the menuElement rodeo
submenus = ds_list_create();
parent = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw parameters

W = 500;
H = 330;
X = 0.5 * (getDisplayRoomWidth() - W);
Y = 0.5 * (getDisplayRoomHeight() - H);
RelX = X;
RelY = Y;
B = 10;

// color rectangle, containing only full S or full V
colorRectX = X + B;
colorRectY = Y + B;
colorRectW = 200;
colorRectH = 200;

// preselected colors
preselectX = X + B;
preselectY = colorRectY + colorRectH + B;
preselectGridW = 16;
preselectGridH = 4;
preselectCellW = colorRectW / preselectGridW;
preselectCellH = preselectCellW;
preselectW = preselectCellW * preselectGridW;
preselectH = preselectCellH * preselectGridH;
preselects = ds_list_create();

sliderTextX = 220;
sliderX = X + 245;
sliderW = 200;
sliderNumboxX = sliderX - X + sliderW + 7;
sliderH = 24;
sliderSep = 10;
sliderNumboxW = 40;
// colored RGB sliders
// RGB text
(addSubmenu(submenus, id, createTextRect(sliderTextX, 0 + B, 0, sliderH, "RGB", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
// R slider and numbox
rSliderY = Y + B + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, rSliderY - Y, 0, sliderH, "R: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
rNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, rSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
r = 0;
// G slider and numbox
gSliderY = rSliderY + sliderSep + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, gSliderY - Y, 0, sliderH, "G: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
gNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, gSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
g = 0;
// B slider and numbox
bSliderY = gSliderY + sliderSep + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, bSliderY - Y, 0, sliderH, "B: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
bNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, bSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
b = 0;

hsvSliderY = bSliderY + sliderSep + sliderH;
// colored HSV sliders
// HSV text
(addSubmenu(submenus, id, createTextRect(sliderTextX, hsvSliderY + B - Y, 0, sliderH, "HSV", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
// H slider and numbox
hSliderY = hsvSliderY + B + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, hSliderY - Y, 0, sliderH, "H: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
hNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, hSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
h = 0;
// S slider and numbox
sSliderY = hSliderY + sliderSep + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, sSliderY - Y, 0, sliderH, "S: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
sNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, sSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
s = 0;
// V slider and numbox
vSliderY = sSliderY + sliderSep + sliderH;
(addSubmenu(submenus, id, createTextRect(sliderTextX, vSliderY - Y, 0, sliderH, "V: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
vNumbox = addSubmenu(submenus, id, createNumBox(sliderNumboxX, vSliderY - Y, sliderNumboxW, sliderH, "0", fnt_subtitle, c_white, c_dkgray, c_black, c_white, 1, 1, 1, 0.4));
v = 0;

// currently selected color
// textbox
(addSubmenu(submenus, id, createTextRect(B, H - 24 - B, 0, 24, "Selected color: ", fnt_subtitle, c_black, c_gray, c_black, 1, 0, 0))).halign = fa_left;
// color
colorX = X + B + 128;
colorY = Y + H - 24 - B;
colorW = 24;
colorH = 24;

// confirm button
confirmX = X + W - B - 96;
confirmY = Y + H - 24 - B;
confirmW = 96;
confirmH = 24;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// preselected colors
ds_list_add(preselects, make_colour_rgb(0, 0, 0));
ds_list_add(preselects, make_colour_rgb(64, 64, 64));
ds_list_add(preselects, make_colour_rgb(255, 0, 0));
ds_list_add(preselects, make_colour_rgb(255, 106, 0));
ds_list_add(preselects, make_colour_rgb(255, 216, 0));
ds_list_add(preselects, make_colour_rgb(182, 255, 0));
ds_list_add(preselects, make_colour_rgb(76, 255, 0));
ds_list_add(preselects, make_colour_rgb(0, 255, 33));
ds_list_add(preselects, make_colour_rgb(0, 255, 144));
ds_list_add(preselects, make_colour_rgb(0, 255, 255));
ds_list_add(preselects, make_colour_rgb(0, 148, 255));
ds_list_add(preselects, make_colour_rgb(0, 38, 255));
ds_list_add(preselects, make_colour_rgb(72, 0, 255));
ds_list_add(preselects, make_colour_rgb(178, 0, 255));
ds_list_add(preselects, make_colour_rgb(255, 0, 220));
ds_list_add(preselects, make_colour_rgb(255, 0, 110));

ds_list_add(preselects, make_colour_rgb(255, 255, 255));
ds_list_add(preselects, make_colour_rgb(128, 128, 128));
ds_list_add(preselects, make_colour_rgb(127, 0, 0));
ds_list_add(preselects, make_colour_rgb(127, 51, 0));
ds_list_add(preselects, make_colour_rgb(127, 106, 0));
ds_list_add(preselects, make_colour_rgb(91, 127, 0));
ds_list_add(preselects, make_colour_rgb(38, 127, 0));
ds_list_add(preselects, make_colour_rgb(0, 127, 14));
ds_list_add(preselects, make_colour_rgb(0, 127, 70));
ds_list_add(preselects, make_colour_rgb(0, 127, 127));
ds_list_add(preselects, make_colour_rgb(0, 74, 127));
ds_list_add(preselects, make_colour_rgb(0, 19, 127));
ds_list_add(preselects, make_colour_rgb(33, 0, 127));
ds_list_add(preselects, make_colour_rgb(87, 0, 127));
ds_list_add(preselects, make_colour_rgb(127, 0, 110));
ds_list_add(preselects, make_colour_rgb(127, 0, 55));

ds_list_add(preselects, make_colour_rgb(160, 160, 160));
ds_list_add(preselects, make_colour_rgb(48, 48, 48));
ds_list_add(preselects, make_colour_rgb(255, 127, 127));
ds_list_add(preselects, make_colour_rgb(255, 178, 127));
ds_list_add(preselects, make_colour_rgb(255, 233, 127));
ds_list_add(preselects, make_colour_rgb(218, 255, 127));
ds_list_add(preselects, make_colour_rgb(165, 255, 127));
ds_list_add(preselects, make_colour_rgb(127, 255, 142));
ds_list_add(preselects, make_colour_rgb(127, 255, 197));
ds_list_add(preselects, make_colour_rgb(127, 255, 255));
ds_list_add(preselects, make_colour_rgb(127, 201, 255));
ds_list_add(preselects, make_colour_rgb(127, 146, 255));
ds_list_add(preselects, make_colour_rgb(161, 127, 255));
ds_list_add(preselects, make_colour_rgb(214, 127, 255));
ds_list_add(preselects, make_colour_rgb(255, 127, 237));
ds_list_add(preselects, make_colour_rgb(255, 127, 182));

ds_list_add(preselects, make_colour_rgb(192, 192, 192));
ds_list_add(preselects, make_colour_rgb(96, 96, 96));
ds_list_add(preselects, make_colour_rgb(127, 63, 63));
ds_list_add(preselects, make_colour_rgb(127, 89, 63));
ds_list_add(preselects, make_colour_rgb(127, 116, 63));
ds_list_add(preselects, make_colour_rgb(109, 127, 63));
ds_list_add(preselects, make_colour_rgb(82, 127, 63));
ds_list_add(preselects, make_colour_rgb(63, 127, 71));
ds_list_add(preselects, make_colour_rgb(63, 127, 98));
ds_list_add(preselects, make_colour_rgb(63, 127, 127));
ds_list_add(preselects, make_colour_rgb(63, 100, 127));
ds_list_add(preselects, make_colour_rgb(63, 73, 127));
ds_list_add(preselects, make_colour_rgb(80, 63, 127));
ds_list_add(preselects, make_colour_rgb(107, 63, 127));
ds_list_add(preselects, make_colour_rgb(127, 63, 118));
ds_list_add(preselects, make_colour_rgb(127, 63, 91));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control selection
setActive(id, active);
if (!active)
{
    ignoreClick = true;
    exit;
}
switch (selecting)
{
    case COLORMENU_RECT:
        var rectX = clamp(cursor_get_x(), colorRectX, colorRectX + colorRectW);
        var rectY = clamp(cursor_get_y(), colorRectY, colorRectY + colorRectH);
        // y is hue
        var hue = map_range(rectY, colorRectY, colorRectY + colorRectH, 0, 255);
        // left is value
        var value = clamp(map_range(rectX, colorRectX, colorRectX + (0.5 * colorRectW), 0, 255), 0, 255);
        // right is saturation
        var sat = clamp(map_range(rectX, colorRectX + (0.5 * colorRectW), colorRectX + colorRectW, 255, 0), 0, 255);
        selected = make_color_hsv(hue, sat, value);
        break;
    case COLORMENU_PRESELECT:
        for (var i = 0; i &lt; ds_list_size(preselects); i++)
        {
            var preX = preselectX + map_range(i mod preselectGridW, 0, preselectGridW, 0, preselectW);
            var preY = preselectY + map_range(floor(i / preselectGridW), 0, preselectGridH, 0, preselectH);
            if (mouse_in_rect(preX, preY, preselectCellW, preselectCellH))
            {
                selected = preselects[| i];
                selecting = COLORMENU_PRESELECT;
            }
        }
        break;
    case COLORMENU_R:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        r = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_rgb(r, g, b);
        break;
    case COLORMENU_G:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        g = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_rgb(r, g, b);
        break;
    case COLORMENU_B:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        b = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_rgb(r, g, b);
        break;
    case COLORMENU_H:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        h = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_hsv(h, s, v);
        break;
    case COLORMENU_S:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        s = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_hsv(h, s, v);
        break;
    case COLORMENU_V:
        var rectX = clamp(cursor_get_x(), sliderX, sliderX + sliderW);
        v = map_range(rectX, sliderX, sliderX + sliderW, 0, 255);
        selected = make_color_hsv(h, s, v);
        break;
}
// update from numboxes
if (rNumbox.finished)
{
    r = clamp(round(real(rNumbox.text)), 0, 255);
    selected = make_color_rgb(r, g, b);
    rNumbox.finished = false;
}
if (gNumbox.finished)
{
    g = clamp(round(real(gNumbox.text)), 0, 255);
    selected = make_color_rgb(r, g, b);
    gNumbox.finished = false;
}
if (bNumbox.finished)
{
    b = clamp(round(real(bNumbox.text)), 0, 255);
    selected = make_color_rgb(r, g, b);
    bNumbox.finished = false;
}
if (hNumbox.finished)
{
    h = clamp(round(real(hNumbox.text)), 0, 255);
    selected = make_color_hsv(h, s, v);
    hNumbox.finished = false;
}
if (sNumbox.finished)
{
    s = clamp(round(real(sNumbox.text)), 0, 255);
    selected = make_color_hsv(h, s, v);
    sNumbox.finished = false;
}
if (vNumbox.finished)
{
    v = clamp(round(real(vNumbox.text)), 0, 255);
    selected = make_color_hsv(h, s, v);
    vNumbox.finished = false;
}
// update all other things
if (selected &gt;= 0)
{
    r = colour_get_red(selected);
    g = colour_get_green(selected);
    b = colour_get_blue(selected);
    h = colour_get_hue(selected);
    s = colour_get_saturation(selected);
    v = colour_get_value(selected);
}
// clamp all numboxes
if (!rNumbox.selected)
{
    rNumbox.text = string(round(clamp(r, 0, 255)));
}
if (!gNumbox.selected)
{
    gNumbox.text = string(round(clamp(g, 0, 255)));
}
if (!bNumbox.selected)
{
    bNumbox.text = string(round(clamp(b, 0, 255)));
}
if (!hNumbox.selected)
{
    hNumbox.text = string(round(clamp(h, 0, 255)));
}
if (!sNumbox.selected)
{
    sNumbox.text = string(round(clamp(s, 0, 255)));
}
if (!vNumbox.selected)
{
    vNumbox.text = string(round(clamp(v, 0, 255)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this and children
event_user(UPDATE_SIZES);
updateAbsolutePositions(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// no longer selecting
selecting = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle left click select
// select color if applicable
// if on the color rectangle
if (!ignoreClick &amp;&amp; active &amp;&amp; checkFocus(id))
{
    if (mouse_in_rect(colorRectX, colorRectY, colorRectW, colorRectH))
    {
        // y is hue
        var hue = map_range(cursor_get_y(), colorRectY, colorRectY + colorRectH, 0, 255);
        // left is value
        var value = clamp(map_range(cursor_get_x(), colorRectX, colorRectX + (0.5 * colorRectW), 0, 255), 0, 255);
        // right is saturation
        var sat = clamp(map_range(cursor_get_x(), colorRectX + (0.5 * colorRectW), colorRectX + colorRectW, 255, 0), 0, 255);
        selected = make_color_hsv(hue, sat, value);
        selecting = COLORMENU_RECT;
    }
    else if (mouse_in_rect(preselectX, preselectY, preselectW, preselectH))
    {
        for (var i = 0; i &lt; ds_list_size(preselects); i++)
        {
            var preX = preselectX + map_range(i mod preselectGridW, 0, preselectGridW, 0, preselectW);
            var preY = preselectY + map_range(floor(i / preselectGridW), 0, preselectGridH, 0, preselectH);
            if (mouse_in_rect(preX, preY, preselectCellW, preselectCellH))
            {
                selected = preselects[| i];
                selecting = COLORMENU_PRESELECT;
            }
        }
    }
    else if (mouse_in_markerTri(map_range(r, 0, 255, sliderX, sliderX + sliderW), rSliderY + sliderH))
    {
        selecting = COLORMENU_R;
    }
    else if (mouse_in_markerTri(map_range(g, 0, 255, sliderX, sliderX + sliderW), gSliderY + sliderH))
    {
        selecting = COLORMENU_G;
    }
    else if (mouse_in_markerTri(map_range(b, 0, 255, sliderX, sliderX + sliderW), bSliderY + sliderH))
    {
        selecting = COLORMENU_B;
    }
    else if (mouse_in_markerTri(map_range(h, 0, 255, sliderX, sliderX + sliderW), hSliderY + sliderH))
    {
        selecting = COLORMENU_H;
    }
    else if (mouse_in_markerTri(map_range(s, 0, 255, sliderX, sliderX + sliderW), sSliderY + sliderH))
    {
        selecting = COLORMENU_S;
    }
    else if (mouse_in_markerTri(map_range(v, 0, 255, sliderX, sliderX + sliderW), vSliderY + sliderH))
    {
        selecting = COLORMENU_V;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update sizes of this menu and children
for (var i = 0; i &lt; ds_list_size(submenus); i++)
{
    var inst = submenus[| i];
    with (inst)
    {
        event_user(UPDATE_SIZES);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
if (active)
{
    // draw background
    drawOutlineRectExt(X, Y, W, H, 2, c_gray, c_black, 1, 1);
    
    // draw color rectangle
    draw_set_alpha(1);
    draw_sprite_stretched(spr_colors, 0, colorRectX, colorRectY, colorRectW, colorRectH);
    
    // draw preselects
    for (var i = 0; i &lt; ds_list_size(preselects); i++)
    {
        var preX = preselectX + map_range(i mod preselectGridW, 0, preselectGridW, 0, preselectW);
        var preY = preselectY + map_range(floor(i / preselectGridW), 0, preselectGridH, 0, preselectH);
        draw_set_color(preselects[| i]);
        draw_rectangle(preX, preY, preX + preselectCellW, preY + preselectCellH, false);
    }
    
    // draw sliders
    // red
    var c1 = make_colour_rgb(0, g, b);
    var c2 = make_colour_rgb(255, g, b);
    draw_rectangle_colour(sliderX, rSliderY, sliderX + sliderW, rSliderY + sliderH, c1, c2, c2, c1, false);
    drawTriMarker(map_range(r, 0, 255, sliderX, sliderX + sliderW), rSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_R)
    {
        drawTriMarker(map_range(r, 0, 255, sliderX, sliderX + sliderW), rSliderY + sliderH, c_blue, c_white);
    }
    // green
    var c1 = make_colour_rgb(r, 0, b);
    var c2 = make_colour_rgb(r, 255, b);
    draw_rectangle_colour(sliderX, gSliderY, sliderX + sliderW, gSliderY + sliderH, c1, c2, c2, c1, false);
    drawTriMarker(map_range(g, 0, 255, sliderX, sliderX + sliderW), gSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_G)
    {
        drawTriMarker(map_range(g, 0, 255, sliderX, sliderX + sliderW), gSliderY + sliderH, c_blue, c_white);
    }
    // red
    var c1 = make_colour_rgb(r, g, 0);
    var c2 = make_colour_rgb(r, g, 255);
    draw_rectangle_colour(sliderX, bSliderY, sliderX + sliderW, bSliderY + sliderH, c1, c2, c2, c1, false);
    drawTriMarker(map_range(b, 0, 255, sliderX, sliderX + sliderW), bSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_B)
    {
        drawTriMarker(map_range(b, 0, 255, sliderX, sliderX + sliderW), bSliderY + sliderH, c_blue, c_white);
    }
    // hue
    draw_sprite_stretched(spr_hue, 0, sliderX, hSliderY, sliderW, sliderH);
    drawTriMarker(map_range(h, 0, 255, sliderX, sliderX + sliderW), hSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_H)
    {
        drawTriMarker(map_range(h, 0, 255, sliderX, sliderX + sliderW), hSliderY + sliderH, c_blue, c_white);
    }
    // sat
    var c1 = make_colour_hsv(h, 0, v);
    var c2 = make_colour_hsv(h, 255, v);
    draw_rectangle_colour(sliderX, sSliderY, sliderX + sliderW, sSliderY + sliderH, c1, c2, c2, c1, false);
    drawTriMarker(map_range(s, 0, 255, sliderX, sliderX + sliderW), sSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_S)
    {
        drawTriMarker(map_range(s, 0, 255, sliderX, sliderX + sliderW), sSliderY + sliderH, c_blue, c_white);
    }
    // val
    var c1 = make_colour_hsv(h, s, 0);
    var c2 = make_colour_hsv(h, s, 255);
    draw_rectangle_colour(sliderX, vSliderY, sliderX + sliderW, vSliderY + sliderH, c1, c2, c2, c1, false);
    drawTriMarker(map_range(v, 0, 255, sliderX, sliderX + sliderW), vSliderY + sliderH, c_black, c_white);
    if (selecting == COLORMENU_V)
    {
        drawTriMarker(map_range(v, 0, 255, sliderX, sliderX + sliderW), vSliderY + sliderH, c_black, c_white);
    }
    
    // draw selected color
    draw_set_alpha(1);
    draw_set_color(selected);
    draw_rectangle(colorX, colorY, colorX + colorW, colorY + colorH, false);
    draw_set_color(c_black);
    draw_rectangle(colorX, colorY, colorX + colorW, colorY + colorH, true);
    
    // confirm button
    draw_set_color(c_dkgray);
    draw_set_alpha(1);
    draw_rectangle(confirmX, confirmY, confirmX + confirmW, confirmY + confirmH, false);
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_rectangle(confirmX, confirmY, confirmX + confirmW, confirmY + confirmH, true);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(confirmX + (0.5 * confirmW), confirmY + (0.5 * confirmH), "Confirm");
    // mouse-over highlight
    if (mouse_in_rect(confirmX, confirmY, confirmW, confirmH))
    {
        draw_set_color(c_white);
        draw_set_alpha(0.5);
        draw_rectangle(confirmX, confirmY, confirmX + confirmW, confirmY + confirmH, false);
        // if click on confirm button, do something
        if (!ignoreClick &amp;&amp; mouse_check_button_pressed(mb_left))
        {
            if (instance_exists(target))
            {
                target.color = selected;
                setFocus(noone);
                active = false;
            }
        }
    }
    ignoreClick = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
