///setParticleType(particleType, uiInfoMap)
// takes an info map generated by the UI and sets a particle type's properties to it
var part = argument0;
var info = argument1;

var shape = info[? "shape"];
if (!ds_map_exists(shape, "type"))
{
    return false;
}
switch (shape[? "type"])
{
    case SHAPE_SHAPE:
        part_type_shape(part, shape[? "index"]);
        break;
    case SHAPE_SPRITE:
        part_type_sprite(part, shape[? "index"], shape[? "animate"], shape[? "stretch"], shape[? "random"]);
        break;
}

var scale = info[? "scale"];
part_type_scale(part, scale[? "x"], scale[? "y"]);

var size = info[? "size"];
part_type_size(part, size[? "min"], size[? "max"], size[? "inc"], size[? "wig"]);

var spd = info[? "speed"];
part_type_speed(part, spd[? "min"], spd[? "max"], spd[? "inc"], spd[? "wig"]);

var dir = info[? "dir"];
part_type_direction(part, dir[? "min"], dir[? "max"], dir[? "inc"], dir[? "wig"]);

var angle = info[? "orientation"];
part_type_orientation(part, angle[? "min"], angle[? "max"], angle[? "inc"], angle[? "wig"], angle[? "rel"]);

var grav = info[? "grav"];
part_type_gravity(part, grav[? "amt"], grav[? "dir"]);

var col = info[? "color"];
switch (col[? "type"])
{
    case COLOR_1:
        part_type_colour1(part, col[? "color1"]);
        break;
    case COLOR_2:
        part_type_colour2(part, col[? "color1"], col[? "color2"]);
        break;
    case COLOR_3:
        part_type_colour3(part, col[? "color1"], col[? "color2"], col[? "color3"]);
        break;
    case COLOR_MIX:
        part_type_colour_mix(part, col[? "color1"], col[? "color2"]);
        break;
    case COLOR_RGB:
        part_type_colour_rgb(part, col[? "rmin"], col[? "rmax"], col[? "gmin"], col[? "gmax"], col[? "bmin"], col[? "bmax"]);
        break;
    case COLOR_HSV:
        part_type_colour_hsv(part, col[? "hmin"], col[? "hmax"], col[? "smin"], col[? "smax"], col[? "vmin"], col[? "vmax"]);
        break;
}

var alpha = info[? "alpha"];
switch (alpha[? "type"])
{
    case ALPHA_1:
        part_type_alpha1(part, alpha[? "alpha1"]);
        break;
    case ALPHA_2:
        part_type_alpha2(part, alpha[? "alpha1"], alpha[? "alpha2"]);
        break;
    case ALPHA_3:
        part_type_alpha3(part, alpha[? "alpha1"], alpha[? "alpha2"], alpha[? "alpha3"]);
        break;
}

var life = info[? "life"];
part_type_life(part, life[? "min"], life[? "max"]);

var step = info[? "grav"];
var stepTab = step[? "tabList"];
var stepPart = stepTab[| TAB_PARTICLE];
if (part_type_exists(stepPart))
{
    part_type_step(part, step[? "amt"], stepPart);
}

var death = info[? "grav"];
var deathTab = death[? "tabList"];
var deathPart = deathTab[| TAB_PARTICLE];
if (part_type_exists(deathPart))
{
    part_type_step(part, death[? "amt"], deathPart);
}

return true;

